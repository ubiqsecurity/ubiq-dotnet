using System.Text;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.OpenSsl;
using UbiqSecurity.Internals;
using UbiqSecurity.Model;

namespace UbiqSecurity.Tests.Internals
{
    public class PayloadEncryptionTests
    {
        [Fact]
        public void EncryptPrivateKey_ValidKey_DecryptedKeyMatchesOriginalKey()
        {
            var secretCryptoAccessKey = "test123";

            var keypair = PayloadEncryption.GenerateKeyPair();

            var encryptedPrivateKey = PayloadEncryption.EncryptPrivateKey(keypair.Private, secretCryptoAccessKey);

            Assert.NotNull(encryptedPrivateKey);

            var pemReader = new PemReader(new StringReader(encryptedPrivateKey), new PasswordFinder(secretCryptoAccessKey));

            var unencryptedPrivateKey = (RsaPrivateCrtKeyParameters)pemReader.ReadObject();

            Assert.Equal(keypair.Private, unencryptedPrivateKey);
        }

        [Theory]
        [InlineData(
            "LS0tLS1CRUdJTiBFTkNSWVBURUQgUFJJVkFURSBLRVktLS0tLQpNSUlKbnpCSkJna3Foa2lHOXcwQkJRMHdQREFiQmdrcWhraUc5dzBCQlF3d0RnUUlnQTJYMFFYSjdrVUNBZ2dBCk1CMEdDV0NHU0FGbEF3UUJLZ1FRY1dXNTZqMlRnMHJCOFQ2dXljY2VBQVNDQ1ZEbWo0Tk93WCt5a0tCM3d5d3QKT1hLSS9rVEZaS3FNdHNjazc0ZllZcTN6ZWRDc2ZJSFNHU3hVemFkL2Q1QzVxUS9LL2k5VmwzcUZmZGtvcThsZgovSDNlQ0ttZVlsR2NEdW5KSEU5OEtscm5acnRsZHdWNXFENEV6QjNsVEFncnB1TXdMWEc1dnZ1VC80YnNmbFQxCmpjMVRBcENsL1ZpUys5QjJIR1NYZzUxdHVybXNNWHB6YUFoRGo2KzRjRTJFcU1hL0R0NWxvSFJ3aTNhRzF4clQKZXNleUkzRlBkbDN5aFpNYktLdGd3VndjeHBDN3JvUjROTTZ4RE83RUg3bFVmZHl1K0ZITHRNWG14cTdLMi9CUgo3MU83VThhT0JmTkJSMlJoNHFBMmpKcVZoWXJmQmZrTVJBbW5aa3dpc2s4dlBDdTkyb04wL1dhczd6bXV1YzVlCjVzMUtaTTFWVFRPSFZPK0I4ZEFLWWR2MmYwbmJ3c2JBMzF1V1NkWDJCS3k0N2NJbXZYS1ZGdmxkd1BXWGZBVTEKa1pYWUZvWkI5ZlZZS3BjMHZuR1RNWkdJdmxnVjJOMUp2ck1FaFQvaFlWRkJkaHpZbVN3MnNjMzFsa01NTUZvTwp0Y1hrUS9nMEtKTWJQWEViY2lLUDEwRWxVZUk4Mmo0NzhEM2c3YmZvM0NSbUhlcUtTemdPTDI4NUtsMEFOcm5oCnNRdDZILzh6M21Nc0lsODRCa1lWQzk1NzhtY00vOTRrWnk4MVpJZ3NxRXk1TnZsb0N5NWpvK0h5bkFORm9CL2gKSVNGWWF1NUYvUTNIUy9KZlEvb21NOE13cmUxRzRyeForVWRwUUZuZUErM011dzBzUGNDZkxWTlg0RjdjckNrVAphTDhVOUl1TEN3VDlGTlVoNDZua3JRUUs1WGcvemV4V2lrYWlHU295OWZjVE1aMmpsbmYyQTdRVkFNOUp4clU4CllGN0Z0U3ZXc05jRDB6aVBqVmU0VDJNckIzVitZQ0h1MTFCVzV0dkluNjJCcWRJbWo0T092V0U4ZkExcXZkTTgKNXF5bXdZd3M5eW5OaXFkUDNpSmZ1ZnIraXFqZEFPSzRDc3JUK1k3Y2QzblBQdTZtNS9JK3hNNURXZWRlNnpkQwo0RXAydEUvaWRaeUYxYXJ3ZS84cFFhMU5QZzZHRjdBcE1VdlR1K1hwNk5HREJCSm9lMGkzbzUraURQWXZhcS9MCmt3aWRjNjR3amtuMlJNbS9LdVowNTllY0FvRW92djN6czl2ZWxTZXppU01xN210WExQbVJqc3VqQ0dNbU5JTkQKdlRYdUNUWjJ3Z0ZJNmNHOHYvVWR2REdBZGxtNktCL0ZlUzhmajZ4alZ5L3M4WGJVeXJpL0FBOGZQbTltaVlXVgplSm9UaDdKbWpzZVZWUG54MjRsZ2g0TXhvYUtFVngxcmg0UGNCOGxkQ0dGOW40YXNzdUdNbjE3Rnh3MTlhWnZ4ClhZOERiRzZvRTJ4QXAySndreXFGNStmYjl4amNGQ1JrTWpCQjRybEs4ZXdlWXZTWktYMkcrVk9kTmVpcGIzbkkKZFhidGRBWEgrd3VBdWhTejFCanpBSXFrc3YwSndwVjgweCs2Uk9yUk5PdWpLMThFb2s5VTZXQ1A1Q0FyY1cvTwpGR1gzN2taazMzeU8wMlhVMXppMkFXNUltTEp6MVlhdUowZ0NyVnFnajF6RVk4WmdDNVJ3dENkRXExWGFWbXZVClFQbFpvL3NxZ2dlZUpRS1V3cktwTUNJM2pTY1JtL1hEMHd1M1UrSDNMZ0Q1a1o2UGo4eE8vcy9ZdktNaXB2cm0Kb3IvWjVXTHJnU0trYmF5ZGV3VWpDY2tDWTZnWWxuVnB5cDQ1eWlzZVVXK3N0bkk5S3cyc3JkWGJWTEc2U0JRWQpmSXRuVkl6WUtIc0J2QWRya1JCNTlQUmRveUdyUTM4clRFK05kc2d5ai9aNUdPWHBUU1RIM0JLd3ZqZnFvcVpFClpOSFNKNUFxVXlUQ0RFV0Jpamw3dCtlS25CcW4rN0dSMUpwQ1ZGVFAvTHlLa2J1QXJlUVFVdUY0MTIzRWJuajQKTE9EaVgwQ2FYVUlDaEdEVDQ3UkYwYURsbDNVdDhYSzdwcE0zK1pxdjlpN3VmVFBJYkdZWFl5eWU1WmdoOWlQWApiU0Y2L1R0QWc4bnViL1FHS0RVa2pmTmhNeldTd05XY0wxWEdrNWZkWS90ZURXRkpwaERndEdVTHNFc2ZTdnQ2CjlNSDdscm5CTlF2NU9lbjdPWmV5ZUJ5SVViUkdUb1h3elJuWDB4NGI1K1VvS3NvYU1YTWFmMXpOQnJUTU1iWVkKM0xHdmtRTTFuUUZCdnY2QWRXbm9MUE42TExTQVVOakl0MHFEM2JnKzIvTENSS1l3eTAvdUNPTU80VU9PeVVzUwpEWWhiRGVKM2ZNM3pZZzVVYkhZaVpmNnoyRnhxRk1kSXk1YzAxSHJYTUZKMmZSL2Yzc29WRllEa1IzMi9MK1BhCnoxNjZERm90RUVrNzBmNmN6bWFzL2ZFWU5lY2grL2JYSWpQUS9ZbHBGTGwxTFpVdDg2U2JPeXJrV2k1ZWVHK2IKYTFKaTFtU29oOG9VU2JaY0x3enl3dzlpTmZvR1E1TUJJYmtKSVRFOFdoWkN5WnBGWEJHS0tWRytNaTZWQVZ6Sgp0VnFpRS85YytrL0YwZHVnUmtzS256VHgreThoTEhUZU1NSlJ6R0IveVpqaGJKRGxYMWNCeTVIZ3dCMzdFMzJTClVqNCtwdGJwSW5SQ3VRRGxiN0ZrVjR3bkRrVkxScURPRWc5YjdhSHBHUDM3aStHVmFoVUh2WFJza3p0a1g5bUEKMXBQczNOdnVzbnVEVUgyNmNobFRiTmt4VlBJVFpFeGJvTkdhbkxhUHJLNUpENEZTSTM2czZEeDZYanZEVnl4cAowSHF5alRLRXZCMStKeko5ek1TaEdvbjJCeDRuU0Q2engwYndsOVdaZExZSG1PR3MwdXZxUEF5dEdmWC9ETHpsCldwSmxtRUpmNFpYbWVIQWN5eGhkTnAxRks4MGVNZWVyZ2l3alMxWDBMa2hIR2ZyMjJQV1ppR0pIUFlORnBYdVgKb0cyY3l4Q0lJbVByN1cvUGtZQ0pqV2VjWnV2enVOVjRuMWEvWFczbDkySEpCeGdHQU5FaStzc00xZXlrZUxZYwoyZ1BqdmtVRUswQjhlMzJTQXFHUlduNWxNeC9HSlBRSVFtMkFBd3NFN0g0VmtZYVhwdlVZVWRPaFhsVVhCNWxKCmswUldWU1c1Sk44cktuZ1RWWXVpVDJmOGJpQUFzOTV2ZENYdHJHQy9RcDk2b0dvWTkxQnczdmxTY2xESW0zZzIKOFZCaU43MjJLWW94aEdkV3EyTjRFSXhpVTF0RnJxVW1yU1RucXU3SGdNRlkyL0srV3NZRkRsaXc3eDZCRENNRwo2Y2FuQ3l1Yzk3LzRVMkRvOEtwOWlUTDVuenM2aS9BZEp0S1JOOHhTU3dhYTlweGdSSVd3RUlSTUM1bzhIb05UCmsyRmZVVjhCQUpxbC96amlIOEVIZjJOMG5wTDc0ZVVMemg4QTZhZ2NSK1hrTzRFUWYyLzdKcnhrQlVnUXAxTDgKM1lKbkNiS0pLdkVpVk16NzEveWM5TVV6QS82YktrRTdrN3FhR0ViQVdUYWcrbmdsOFZsYkVweEhsWUFnaGxyOApWdGFTMjVsNjBDVVVLamxld2EwbWR6VXFPbzZ6Z3NsckpyQ2cyalBCOVNSeWRCM3JoMGdlUXArQ0JVNjAxMlRsCmpibEFMdlJpRnJaRjh4cE1oVXNkUHp3YUE3bXJRdVBVUjFma0E3Ri84UWNNcTUyeVVwcVJDNURaOGlMVXVsV2UKLzdsSUwwZXZycVN5THY0dmxpNTAvWWN1TlZtdUp6NnptVnM5SEN5QlJMZVJweVRKK1hFbGVjU0ZjSlkzK3RlMgozdTJZalpodThNNG5IZ0toUWtubmVWQnA1ZU84Um94dHhpbFc0ckhxSzVmcWlQWXl1TnpiYWc4aWVLb3FTS2VUCm9jTDE0L3YyVWRnaE15WHJXNjlQT2hNU2dvbzkrRmpwTDBSeWpHUCtuakEvUXNEK2JLSDk0bWRVOGNaNm5sQVUKOStuYjNFM2xIZ3p0UEJzN0FDL3VNNUk4MytFMGRVNjBla3N5bkQvZ3VmdUtHcC9WVklNVmordWxFbmRwMFF4VQp3WERQYUo5YTNOUmgwQ2N3cHNPbkZiTDU0Zz09Ci0tLS0tRU5EIEVOQ1JZUFRFRCBQUklWQVRFIEtFWS0tLS0t",
            "/gQVM4NI37jWNCo0BRlnsNbgW4kXdm7RBGmnmcDjyMIa",
            "MWIvglBzFyRfVwyfazsmECqCgkWMJo/ZxWh5nyIGIH3LjKBRbPzeW92Ul/WFL/ZzoSzhtTD7fjPS8mMptO9MeSkIOLKz436UeckEWc5WlZI4rOoQ0s9AN4cAAHbZHiv7JEu1UdtBXXKEUoIpFD66acatlfZniMqV8NpsHJKNm7jJn8LF85OmK1P6godkaBO7KEtP33YBF2rMiPNc3TgwHkztUChcSEQFzFYwhA0qNRz3WdHvJWxBmTkzQGbJsPAjB2eFGI8VWTxr2Ax4f8ZT2kEV3NkrtRC7ZTT+hGNHEYlnDKR/rBq/Oq25NArVj+CpmRE4e1x6pN4pRK0P2I7xOg9RMoyqwpKgRFkduGoyPVzNiurKg7WnHLmoFSzT4TxxChVsQccuH+ZZ//5fy6AkExJ02zgD8NF24rtFrboR45l+ft+a38ZFPTE9VYpt2T36bI40tRklVn6G9ObKIFw0qGGoezUrp1FjxN3SQ6X/olW2wd1K7/o1AHukdorLqQNVzPaDsr1kyLczP1VT7FfGFdRSFad6o0QPa6y8txdpePj2QFmcNCIlHb5KsxaK9VZbJlndTfGpxUAZfsMnuggbID/Nijd1Q3GA7duhodwhW2/rchQMGMDbpw6a5SJ7FdX7fdga/6GkGupwwC7iqXH+qVqLBdOj+rpyHN5iyK8QO2U=",
            "qiAm7RXkZZEu554iRHTV2JSucfnU21I7rGNYy12elOM="
        )]
        public void UnwrapDataKey_DecryptsDataKeyToExpectedValue(string base64EncryptedPrivateKey, string secretCryptoAccessKey, string wrappedDataKey, string expectedUnwrappedDataKey)
        {
            var encryptedPrivateKey = Encoding.UTF8.GetString(Convert.FromBase64String(base64EncryptedPrivateKey));

            var result = PayloadEncryption.UnwrapDataKey(encryptedPrivateKey, wrappedDataKey, secretCryptoAccessKey);

            var encodedResult = Convert.ToBase64String(result);

            Assert.Equal(expectedUnwrappedDataKey, encodedResult);
        }
    }
}
